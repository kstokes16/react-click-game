{"version":3,"sources":["logo.svg","components/Container/index.js","components/Header/index.js","components/PlayerCard/index.js","components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Container","props","react_default","a","createElement","className","children","Header","score","topScore","PlayerCard","id","src","image","alt","onClick","handleIncrement","name","position","Jumbotron","App","state","players","clickedPlayer","event","currentPlayer","target","_this","indexOf","setState","sort","b","Math","random","alert","concat","_this2","this","components_Container","components_Header","map","player","components_PlayerCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ymDAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iQCOzBC,MAJf,SAAmBC,GACjB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBJ,EAAMK,iBCSlCC,MAVf,SAAgBN,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,8BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,uBAAkDJ,EAAMO,MAAxD,KACAN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,mBAA8CJ,EAAMQ,yBCQ3CC,MAZf,SAAqBT,GACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAA6BM,GAAG,eAC3CT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BO,IAAKX,EAAMY,MAAOF,GAAG,aAAaG,IAAKb,EAAMU,GAAII,QAASd,EAAMe,kBACzGd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAyBM,GAAG,eAAeV,EAAMgB,MAC/Df,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAyBM,GAAG,mBAAmBV,EAAMiB,mBCIhEC,ICiHAC,6MApHbC,MAAQ,CACNC,UACAd,MAAO,EACPC,SAAU,EACVc,cAAe,MAGjBP,gBAAkB,SAAAQ,GAChB,IAAMC,EAAgBD,EAAME,OAAOZ,IACNa,EAAKN,MAAME,cAAcK,QAAQH,IAAkB,GAG9EE,EAAKE,SACH,CACAP,QAASK,EAAKN,MAAMC,QAAQQ,KAAK,SAAS3B,EAAG4B,GAC3C,MAAO,GAAMC,KAAKC,WAGpBV,cAAe,GACff,MAAO,IAGT0B,MAAM,yBAEFP,EAAKN,MAAMb,MAAQmB,EAAKN,MAAMZ,UAElCkB,EAAKE,SAAS,CAAEpB,SAAUkB,EAAKN,MAAMb,SAIrCmB,EAAKE,SACH,CACEP,QAASK,EAAKN,MAAMC,QAAQQ,KAAK,SAAS3B,EAAG4B,GAC3C,MAAO,GAAMC,KAAKC,WAEpBV,cAAeI,EAAKN,MAAME,cAAcY,OAAOV,GAC/CjB,MAAOmB,EAAKN,MAAMb,MAAQ,GAG5B,WAC2B,KAArBmB,EAAKN,MAAMb,QAEb0B,MAAM,iBACNP,EAAKE,SACH,CACAP,QAASK,EAAKN,MAAMC,QAAQQ,KAAK,SAAS3B,EAAG4B,GAE3C,MAAO,GAAMC,KAAKC,WAEpBR,cAAe,GACfjB,MAAO,gFAwCV,IAAA4B,EAAAC,KACP,OACEnC,EAAAC,EAAAC,cAACkC,EAAD,KACApC,EAAAC,EAAAC,cAACmC,EAAD,CACA/B,MAAO6B,KAAKhB,MAAMb,MAClBC,SAAU4B,KAAKhB,MAAMZ,WACrBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdgC,KAAKhB,MAAMC,QAAQkB,IAAI,SAAAC,GAAM,OAC9BvC,EAAAC,EAAAC,cAACsC,EAAD,CACA1B,gBAAiBoB,EAAKpB,gBACtBL,GAAI8B,EAAO9B,GACXgC,IAAKF,EAAO9B,GACZE,MAAO4B,EAAO5B,MACdI,KAAMwB,EAAOxB,KACbC,SAAUuB,EAAOvB,uBA5GL0B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.449fa72c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <div className=\"container-fluid\">{props.children}</div>;\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <li className=\"navbar-brand\">Atlanta Braves Clicky Game</li>\n      <li className=\"navbar-brand\">Your current score: {props.score} </li>\n      <li className=\"navbar-brand\">Your top score: {props.topScore}</li>\n    </nav>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction PlayerCard (props) {\n    return (\n      <div className=\"col-lg-2 col-md-3 col-sm-6\" id=\"player-card\">\n          <img className=\"img-fluid img-thumbnail\" src={props.image} id=\"player-pic\" alt={props.id} onClick={props.handleIncrement}/>\n          <div className=\"card-body\">\n            <h5 className=\"card-title text-center\" id=\"player-name\">{props.name}</h5>\n            <h5 className=\"card-title text-center\" id=\"player-position\">{props.position}</h5>\n          </div>\n      </div>\n    )\n}\n\nexport default PlayerCard;","import React from 'react';\nimport \"./style.css\";\n\nfunction Jumbotron () {\n    return (\n        <div className=\"jumbotron jumbotron-fluid text-center\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Fluid jumbotron</h1>\n                <p className=\"lead\">This is a modified jumbotron that occupies the entire horizontal space of its parent.</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Jumbotron;","import React, { Component } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Container from \"./components/Container\";\nimport Header from \"./components/Header\";\nimport players from \"./players.json\";\nimport PlayerCard from \"./components/PlayerCard\";\nimport Jumbotron from \"./components/Jumbotron\";\n\nclass App extends Component {\n  // perform all JS logic before the render function\n  state = {\n    players,\n    score: 0,\n    topScore: 0,\n    clickedPlayer: []\n  };\n\n  handleIncrement = event => {\n    const currentPlayer = event.target.alt;\n    const playerAlreadyClicked = this.state.clickedPlayer.indexOf(currentPlayer) > -1;\n\n    if (playerAlreadyClicked) {\n      this.setState(\n        {\n        players: this.state.players.sort(function(a, b) {\n          return 0.5 - Math.random();\n        }\n        ),\n        clickedPlayer: [],\n        score: 0\n      });\n\n      alert(\"You lose. Play again?\");\n\n      if (this.state.score > this.state.topScore)\n      {\n      this.setState({ topScore: this.state.score})\n      }\n    } \n    else {\n      this.setState(\n        {\n          players: this.state.players.sort(function(a, b) {\n            return 0.5 - Math.random();\n          }),\n          clickedPlayer: this.state.clickedPlayer.concat(currentPlayer),\n          score: this.state.score + 1\n        },\n\n        () => {\n          if (this.state.score === 12)\n          {\n            alert(\"Yay! You Win!\");\n            this.setState(\n              {\n              players: this.state.players.sort(function(a, b)\n              {\n                return 0.5 - Math.random();\n              }),\n              currentPlayer: [],\n              score: 0\n            });\n          }\n        });\n    }\n  };\n\n  // handleIncrement = id => {\n  //   this.setState({ score: this.state.score + 1 });\n  //   if (this.state.topScore < this.state.score) {\n  //     this.setState({ topScore: this.state.score + 1 })\n  //   }\n  //   this.shuffle(players);\n  // };\n\n  // end of on click function\n\n  // start of card shuffle\n  // shuffle = (cards) => {\n  //   let currentIndex = cards.length, temporaryValue, randomIndex;\n  //   while (0 !== currentIndex) {\n  //     randomIndex = Math.floor(Math.random() * currentIndex);\n  //     currentIndex -= 1;\n  //     temporaryValue = cards[currentIndex];\n  //     cards[currentIndex] = cards[randomIndex];\n  //     cards[randomIndex] = temporaryValue;\n  //   }\n  //   return cards;\n  // }\n\n  // run this if a card has been clicked more than once\n  // gameOver = () => {\n  //   this.setState({ score: 0 });\n  //   if (this.state.score > this.state.topScore) {\n  //     this.setState({ topScore: this.state.score})\n  //   }\n  //   this.shuffle(players);\n  // }\n\n  // map through the PlayersCard component and render cards for each\n  render() {\n    return (\n      <Container>\n      <Header\n      score={this.state.score}\n      topScore={this.state.topScore}/>\n      <div className=\"container\">\n      <br/>\n      <div className=\"row\">\n      {this.state.players.map(player => (\n      <PlayerCard \n      handleIncrement={this.handleIncrement}  \n      id={player.id}\n      key={player.id}\n      image={player.image}\n      name={player.name}\n      position={player.position}\n      />\n      ))}\n      </div>\n      </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}